# Logic for desired semantics: Zadeh or Lukasiewicz 
(define-fuzzy-logic zadeh)

############## Concepts and Relations 
(define-primitive-concept DaySegment *top* )   
(define-primitive-concept Day *top*)
(define-primitive-concept Gender *top*) 
(define-primitive-concept Age *top*)

(define-primitive-concept WeekendSegment DaySegment)
(define-primitive-concept WeekdaySegment DaySegment)

# General demographics
(define-primitive-concept Female User)
(define-primitive-concept Male User)

(define-primitive-concept NightAndMorning DaySegment)
(define-primitive-concept CommuteToWork WeekdaySegment)
(define-primitive-concept AtWork WeekdaySegment)
(define-primitive-concept CommuteToHome WeekdaySegment)
(define-primitive-concept AtHome DaySegment)
(define-primitive-concept DayTime WeekendSegment)
(define-primitive-concept Evening DaySegment)
(define-primitive-concept CommuteSegment (g-or CommuteToWork CommuteToHome))
(define-primitive-concept OutHomeSegment (g-or AtWork CommuteToHome CommuteToWork DayTime )) # out of home location segments
(define-primitive-concept NotHomeNorWorkSegment (g-or CommuteToHome CommuteToWork DayTime ))  # free time segments: out of home and work

(define-primitive-concept Weekday (w-sum (0.2 N)(0.2 C2W)(0.2 W)(0.2 C2H)(0.2 E)))
(define-primitive-concept Weekend (w-sum (0.33 N)(0.33 D)(0.33 E)))

##################### Properties (Roles)
(range hasDaySegment DaySegment)
(domain hasDaySegment Day)

# LOCATION SEGMENT SPECIFIC FEATURES
# Abstract roles (data properties):  
# DAY SEGMENT PROPERTIES
(functional hasStartT)
(functional hasEndT)
(functional hasStartT)
(functional hasEndT)
(functional hasSleepStartT)
(functional hasSleepEndT)
(functional hasLunchStartT)
(functional walkedNSteps)
(functional walkedNStepsAtLunch)
(functional spentNCalories)
(functional hasMaxHR) 
(functional hasAvgHR)
(functional hasGSR)
(functional hasAvgSleepQuality)
(functional hasInmunoDefenseLevel)
(functional hasFloors)
(functional hasBMI)
(functional hasMinutesAsleep)
(functional hasMinutesAwake)
(functional hasTimesAwaken)
(functional hasMinutesUntilFellAsleep)
(functional hasTossCount) 
(functional hasDuration)
(functional hasLunchDuration)
(functional happensDuringCommuteSegment)

# FIXED FUZZY DATATYPES (FOR ALL PEOPLE)

(range hasStartT *integer* 0 1440)  # in min
(range hasEndT *integer* 0 1440 )
(range hasSleepStartT *integer* 0 1440)  
(range hasSleepEndT *integer* 0 1440 )
(range hasLunchStartT *integer* 0 1440 )
(range walkedNSteps *integer* 0 999999)
(range walkedNStepsAtLunch *integer* 0 999999)
(range spentNCalories *integer* 0 999999 )
(range hasMaxHR *integer* 0 1000)  
(range hasAvgHR *integer* 0 1000)
(range hasGSR *integer* 0 999999)  # real?
(range hasAvgSleepQuality *real* 0.0 20.0 )
(range hasInmunoDefenseLevel *integer* 0 10)
(range hasFloors *integer* 0 999999)
(range hasBMI *real* 0 50)
(range hasMinutesAsleep *integer* 0 1440)
(range hasMinutesAwake *integer* 0 1440 )
(range hasTimesAwaken *integer* 0 999999)   
(range hasMinutesUntilFellAsleep *integer* 0 1440) 
(range hasTossCount *integer* 0 999999)  # sleeping 
(range hasDuration *integer* 0 1440) # in minutes
(range hasLunchDuration *integer* 0 1440) # in minutes

(range hasWalkingR *real* 0 1)  # ratio [0,1] in segment
(range hasCyclingR *real* 0 1) # ratio [0,1] in segment
(range hasRunningR *real* 0 1) # ratio [0,1] in segment
(range hasTransportR *real* 0 1) # ratio [0,1] in segment

(range hasWalkingDistance *integer* 0 999999 )  # in meters
(range hasRunningDistance *integer* 0 999999)
(range hasCyclingDistance *integer* 0 999999 )
(range hasTransportDistance *integer* 0 999999)

# AtWork property
(range walkedStepsAtLunch *integer* 0 999999)

# User's properties
(range hasWeightKg *real* 0 1000 )
(range hasHeightCm *real* 0 300)  
(range hasGender Gender)
(domain hasGender User)
(domain hasGPSLocation DaySegment)
(range hasGPSLocation POI)  # requires non-monotonicity to make it non functional (timepoints)

########### Fuzzy datatypes
# PERSONALIZED DATATYPES (INDIVIDUAL CUSTOMIZED VALUES FOR EACH PERSON) ToDo: divide on customized-built based on data values, instead of all written ad hoc beforehand.
(define-fuzzy-concept Zero crisp(0,0,0,0))
(define-fuzzy-concept LargerThanZero right-shoulder(0,1,0.01, 0.011))
(define-fuzzy-concept HighCalorieCountWoman right-shoulder (0, 6000, 500, 666)) #(0, 6000, 2000, 2000))  # Recomm. 2000 per day. Calories in % of total day calories?)
(define-fuzzy-concept HighCalorieCountMan right-shoulder (0, 8000, 700, 833)) # (0, 8000, 2500, 1600))
(define-fuzzy-concept LowCalorieCountWoman left-shoulder (0, 6000, 330, 430))  #  Doing nothing: 1500, 1625))  
(define-fuzzy-concept LowCalorieCountMan left-shoulder (0, 8000, 460, 560))  #  Doing nothing: 1600, 1720))
(define-fuzzy-concept MediumCalorieCountWoman trapezoidal (0, 6000, 400, 480, 500, 530))   
(define-fuzzy-concept MediumCalorieCountMan trapezoidal (0, 8000, 400, 480, 500, 530))  
(define-fuzzy-concept LongShoppingDuration trapezoidal (0, 1440, 0, 15, 30, 60))  
(define-fuzzy-concept ShortShoppingDuration trapezoidal (0, 1440, 0, 5, 15, 20)) 
(define-fuzzy-concept BarVisitDuration trapezoidal (0, 1440, 5, 15, 30, 120))  
(define-fuzzy-concept SmokingDuration trapezoidal (0, 1440, 2, 3, 5, 20))
(define-fuzzy-concept HighHR right-shoulder (30, 300, 85, 100))  # max, min possible?
(define-fuzzy-concept LowHR left-shoulder (30, 300, 50, 62))
(define-fuzzy-concept MediumHR trapezoidal (30, 300, 60, 65, 85, 90)) # AKI: for men?
(define-fuzzy-concept GymSessionDuration trapezoidal (0, 1440, 15, 20, 45, 90))
(define-fuzzy-concept MediterraneanLunchStartT trapezoidal (0, 1440, 690, 720, 780, 830)) # 11.30, 12, 13, 13.30 am
(define-fuzzy-concept MediterraneanLunchDuration trapezoidal (0, 1440, 30, 45, 75, 90)) 
(define-fuzzy-concept DutchLunchStartT trapezoidal (0, 1440, 780, 840, 900, 945)) # 13, 14, 15, 15.45 am
(define-fuzzy-concept MediterraneanJobStartT trapezoidal (0, 1440, 360, 420, 480, 540)) # 6, 7, 8, 9 am
(define-fuzzy-concept DutchJobStartT trapezoidal (0, 1440, 480, 540, 600, 660)) # 8, 9, 10, 11 am
(define-fuzzy-concept MediterraneanJobEndT trapezoidal (0, 1440, 960, 1020, 1080, 1140)) # 4, 5, 6, 7 pm
(define-fuzzy-concept DutchJobEndT trapezoidal (0, 1440, 900, 960, 1020, 1080)) # 3, 4, 5, 6 pm
(define-fuzzy-concept DutchLunchDuration trapezoidal (0, 1440, 0, 15, 30, 60))
(define-fuzzy-concept EarlyWakeUpTime trapezoidal (0, 1440, 30, 90, 210, 270))  # 5, 6, 8, 9 am
(define-fuzzy-concept ManyNightInterruptions right-shoulder (0, 100, 2, 5))  # Natalia's avg 0 (2 out of 7 nights: 1 interruption)
(define-fuzzy-concept EarlySleepTime trapezoidal (0, 1440, 1260, 1320, 1380, 1410))  # 21, 22, 23, 23:30 
(define-fuzzy-concept VeryEarlyLeaveHomeTime trapezoidal (0, 1440, 300, 360, 420, 480))  # 5, 6, 7, 8 am
(define-fuzzy-concept EarlyArriveHomeTime trapezoidal (0, 1440, 960, 990, 1020, 1050))  # 16, 16:30, 17, 17:30
(define-fuzzy-concept HighTossCount right-shoulder (0, 200, 30, 45))  # Natalia's avg 23, 24 min: 9, 23. max: 33, 45.

(define-fuzzy-concept ShortTransportDistance left-shoulder (0, 999999, 20000, 30500))  # in m 
(define-fuzzy-concept MediumTransportDistance trapezoidal (0, 999999, 30000, 40000, 80000, 90000))  # in m (30-90 km)
(define-fuzzy-concept LongTransportDistance right-shoulder (0, 999999, 85000, 150000))  #  in m (+85-150km)   65km Gr to Ca√±ar. 170km Gr-Malaga

(define-fuzzy-concept HighWalkingDistance right-shoulder(0, 999999, 3500, 5000)) # in m (+4-5 km)
(define-fuzzy-concept ShortWalkingDistance left-shoulder (0, 999999, 1500, 2100))  # in m (3800 m is short for transport, long for bike)
(define-fuzzy-concept MediumWalkingDistance trapezoidal (0, 999999, 2000, 2800, 3000, 3800))  # in m (2-3.8 km)

(define-fuzzy-concept HighRunningDistance right-shoulder(0, 999999, 3500, 4000)) # in m (+3.5-4 km)
(define-fuzzy-concept ShortRunningDistance left-shoulder (0, 999999, 900, 1100))  
(define-fuzzy-concept MediumRunningDistance trapezoidal (0, 999999, 1000, 1500, 2500, 3600))  # in m

(define-fuzzy-concept HighCyclingDistance right-shoulder(0, 999999, 9500, 18000)) # in m (+9.5-18 km)
(define-fuzzy-concept ShortCyclingDistance left-shoulder (0, 999999, 3500, 5000))  # in m 
(define-fuzzy-concept MediumCyclingDistance trapezoidal (0, 999999, 4500, 6000, 8000, 10000)) # in m (4.5-10 km)

(define-fuzzy-concept MediumTransportR trapezoidal (0, 1, 0.01, 0.02, 0.04, 0.05))   # 20, 30, 45, 70 min / 1440    ### check functions overlap from here above
(define-fuzzy-concept LowTransportR left-shoulder (0, 1, 0, 0.015)) # 5, 25 min /1440
(define-fuzzy-concept HighTransportR right-shoulder (0, 1, 0.045, 0.5)) # 60 75 min / 1440

(define-fuzzy-concept MediumWalkingR trapezoidal (0, 1, 0.01, 0.02, 0.04, 0.05)) 
(define-fuzzy-concept HighWalkingR right-shoulder (0, 1, 0.045, 0.5))
(define-fuzzy-concept LowWalkingR left-shoulder (0, 1, 0, 0.015))

(define-fuzzy-concept HighRunningR right-shoulder (0, 1, 0.045, 0.5))
(define-fuzzy-concept LowRunningR left-shoulder (0, 1, 0, 0.015))
(define-fuzzy-concept MediumRunningR trapezoidal (0, 1, 0.01, 0.02, 0.04, 0.05))
 
(define-fuzzy-concept LowCyclingR left-shoulder (0, 1, 0, 0.015))
(define-fuzzy-concept HighCyclingR right-shoulder (0, 1, 0.045, 0.5))
(define-fuzzy-concept MediumCyclingR trapezoidal (0, 1, 0.01, 0.02, 0.04, 0.05)) 

(define-fuzzy-concept HighNSteps right-shoulder(0, 999999, 1700, 2000))  # per segment  **AKI: most of measurements are now per segment, does this make sense if some segments are 8h long and others 30 min long?
(define-fuzzy-concept LowNSteps left-shoulder(0, 999999, 800, 1000))
(define-fuzzy-concept MediumNSteps trapezoidal(0, 999999, 800, 1000, 1500, 1700))

(define-fuzzy-concept StrollingNSteps trapezoidal(0, 999999, 900, 1000, 1900, 2000))
(define-fuzzy-concept LowREMSleep left-shoulder(0.0, 1440, 120, 180))   # 2-3h?
(define-fuzzy-concept LateSleepTime trapezoidal(0, 1440, 0, 60, 240, 300))  # 00-01-04-05h
(define-fuzzy-concept LateWakeUpTime trapezoidal(0, 1440, 540, 600, 660, 720)) # 9-10-11-12
(define-fuzzy-concept ManyLocationsSegments right-shoulder(0, 999999, 5, 7))
(define-fuzzy-concept ManyStepsAtWork trapezoidal(0, 999999, 1500, 2000, 3000, 3500))
(define-fuzzy-concept PassByDuration trapezoidal(0, 1440, 2, 3, 4, 5)) # in min

################# CONCRETE (DAYSEGMENT) LIFESTYLE RULES 
# K or O place, then he may be shopping, at bar or gym or kindergarden. 

(define-concept Shopaholic (g-and NotHomeNorWorkSegment (some hasMaxHR MediumHR ) (some hasAvgHR MediumHR) (some hasDuration ShortShoppingDuration)(some walkedNSteps MediumNSteps) (some hasWalkingDistance MediumWalkingDistance) (some spentNCalories MediumCalorieCountMan)(g-or (some hasWalkingR MediumWalkingR) (some hasTransportR MediumTransportR)))) ##%
# AKI: Could we add (some happensDuringCommuteSegment)? 

(define-concept Kindergarden (g-and NotHomeNorWorkSegment (some hasMaxHR MediumHR) (some hasAvgHR MediumHR) (some spentNCalories MediumCalorieCountMan) (some walkedNSteps MediumNSteps) (g-or (some hasWalkingDistance MediumWalkingDistance) (some hasTransportDistance MediumTransportDistance)) (g-or (some hasWalkingR MediumWalkingR) (some hasTransportR MediumTransportR))))##%

(define-concept GymAddict (g-and OutHomeSegment (some hasMaxHR HighHR) (some hasAvgHR HighHR) (some hasDuration GymSessionDuration)(some spentNCalories HighCalorieCountMan) (some walkedNSteps HighNSteps)(some runnedNSteps HighNSteps)(some hasWalkingDistance HighWalkingDistance)(some hasRunningDistance HighRunningDistance)(some hasCyclingDistance HighCyclingDistance) (some hasWalkingR HighWalkingR) (some hasCyclingR HighCyclingR) (some hasRunningR HighRunningR))) ##%# add maintained in time for at least periods of 15min within an hour (Rim?)

(define-concept BarLover (g-and OutHomeAndWorkSegment (some hasMaxHR HighHR ) (some hasDuration BarVisitDuration) (some hasAvgHR HighHR) (some spentNCalories MediumCalorieCountMan) (g-or (some hasTransportDistance MediumTransportDistance)(some walkedNSteps MediumNSteps) (some hasWalkingR MediumWalkingR)))) ##%# add OutHomeSegment after work -> use Aalst or Rim language for temporal relations?  # assumes person drinks alcoholic drink as both drinking and eating increase HR

##%# Dutch eats fast sandwich for lunch while may be walking around the lake or campus. 
(define-concept DutchLuncher (g-and AtWork (some walkedNStepsAtLunch HighNSteps)(some hasLunchStartT DutchLunchStartT)(some hasLunchDuration DutchLunchDuration) (some spentNCalories MediumCalorieCountMan)))##%

##%# Mediterranean luncher has lunch for about 1h.
(define-concept MediterraneanLuncher (g-and AtWork (some walkedNStepsAtLunch LowNSteps)(some hasLunchStartT MediterraneanLunchStartT)(some hasLunchDuration MediterraneanLunchDuration) (some spentNCalories LowCalorieCountMan)))##%

##%# Northern worker has early work hours with short lunch breaks. 
(define-concept DutchWorker (g-and AtWork (some hasEndT DutchJobEndT)(some hasStartT DutchJobStartT )))##%

##%# Mediterranean/Latin worker has work hours shifted, later than the rest of workers, and with longer lunch break
(define-concept MediterraneanWorker (g-and AtWork (some hasEndT MediterraneanJobEndT)(some hasStartT MediterraneanJobStartT )))##%

##%# CalorieOptimizer: talking/checking on the phone while walking, or always takes the stairs against his colleagues who take elevator (problem: fuzzyDL cannot take comparison with other instances) #**enforce in fmf >0
(define-concept CalorieOptimizer (g-and AtWork (some walkedNSteps HighNSteps) (some hasRunningDistance LargerThanZero)(some hasRunningR LargerThanZero)))  ##%

##%# Worker bringing kids to childcare  # how to integrate the place visited before/after work is kindergarden if not with temporality/external, paralelly running Markov chain? # **Todo create rule for visitsKeyLoc Kindergarden as consequent.
#(define-concept KidParent (g-and (g-and CommuteToWork (some visitsKindergarden true)) (g-and CommuteToHome (some visitsKindergarden true)))) ##%#**TODO: how to find out?

# Early bird: a person that leaves home very early 
(define-concept EarlyBird (g-and NightAndMorning (some hasEndT VeryEarlyLeaveHomeTime)(some hasStartT EarlyArriveHomeTime))) #hasSleepEndT EarlyWakeUpTime)))

# Night owl  
(define-concept NightOwl (g-and NightAndMorning (some hasSleepStartT LateSleepTime )(some hasSleepEndT LateWakeUpTime)))

# Mail man/ delivery boy
(define-concept Mailman (g-and AtWork (some walkedNSteps ManyStepsAtWork ))) # complete (some visitsNLocations ManyLocationSegments))) # (some hasNSegments ManyLocationSegments)

# Pet owner: if the person goes near home before going to work with his pet
(define-concept PetOwner (g-and (g-or NightAndMorning Evening) (some hasAvgHR LowHR) (some walkedNSteps StrollingNSteps )))   #(some visitsNearHomeLocation true) 
# DILEMMA: how to model location segments which are based on time (night and morning, evening) and modularize/separate them from location segments which are based on location (work, home). I.e. how to detect from the data we have that the person is in a location near home? a) with new segment NearHome b) with places visited during "time-based" location segment (a location segment needs a list of places visited during that time segment of the day). b) with boolean property from the time segment # ADD WEIGHTS

# Active commuter if the person walks, run, skates or cycles to work 
(define-concept SportiveCommuter (g-and CommuteSegment (some hasMaxHR HighHR) (some hasAvgHR HighHR) (some hasRunningDistance MediumRunningDistance) (some hasRunningR MediumRunningR) (some hasWalkingDistance HighWalkingDistance) (some hasWalkingR HighWalkingR)(some hasTransportDistance ShortTransportDistance) (some hasTransportR LowTransportR)))

# Passive commuter  
(define-concept PassiveCommuter (g-and CommuteSegment (some hasMaxHR LowHR) (some hasAvgHR LowHR) (some hasRunningDistance Zero) (some hasRunningR Zero) (some hasTransportDistance MediumTransportDistance) (some hasTransportR MediumTransportR) (some hasWalkingDistance ShortWalkingDistance) (some hasWalkingR LowWalkingR) (some hasRunningDistance ShortRunningDistance) (some hasRunningR LowRunningR) (some hasCyclingDistance ShortCyclingDistance) (some hasCyclingR LowWalkingR))) # **add last to rest

################# GENERAL (DAYSEGMENT) LIFESTYLE RULES 

(define-concept Sedentary (g-and DaySegment (some hasMaxHR LowHR ) (some hasAvgHR LowHR) (some spentNCalories LowCalorieCountMan) (some walkedNSteps LowNSteps) (some hasWalkingDistance ShortWalkingDistance) (some hasWalkingR LowWalkingR) (some hasCyclingDistance ShortCyclingDistance) (some hasCyclingR LowCyclingR) (some hasTransportDistance LongTransportDistance) (some hasTransportR HighWalkingR)))            

(define-concept Active (g-and DaySegment (some hasMaxHR HighHR ) (some hasAvgHR HighHR) (some walkedNSteps  HighNSteps)(some spentNCalories HighCalorieCountMan) (some hasWalkingR HighWalkingR) (some hasWalkingDistance HighWalkingDistance) (some hasRunningR HighRunningR) (some hasRunningDistance HighRunningDistance) (some hasTransportR LowTransportR) (some hasTransportDistance ShortTransportDistance))) 

(define-concept POIFrequentVisitor (g-and DaySegment (some hasMaxHR MediumHR ) (some hasAvgHR MediumHR) (some hasDuration LongShoppingDuration) (some walkedNSteps MediumNSteps) (some spentNCalories MediumCalorieCountMan)))                # AKI: conflict of semantic definition: key location can be visited within a work or home segment. Can we define more general (or at least non overlapping) segments with no time & location overlap?

# If the person has low average or estabilized HR, and eats more than 3-4 times a day and not much running or walking during the day
(define-concept TakeItEasy (g-and DaySegment (some hasMaxHR LowHR) (some hasAvgHR LowHR) (some hasAvgHR LowHR) (some walkedNSteps LowNSteps) (some hasRunningDistance Zero) (some hasRunningR Zero)))

# If the person has an accelerated life, with high HR, lots of walking and running along his working hours, and also eats twice a day. workaround for cardinality??
(define-concept Accelerated (g-and DaySegment (some hasMaxHR HighHR) (some hasAvgHR HighHR) (some walkedNSteps HighNSteps) (some spentNCalories HighCalorieCountMan) (some hasWalkingDistance MediumWalkingDistance) (some hasWalkingR MediumWalkingR) (some hasCyclingDistance MediumCyclingDistance) (some hasCyclingR MediumCyclingR) (some hasRunningDistance MediumRunningDistance) (some hasRunningR MediumRunningR))) 

# A person always in a hurry and running late at day. Very high hr, in all segments and running in each segment ??
(define-concept AlwaysLate (g-and DaySegment (some hasMaxHR HighHR) (some hasAvgHR HighHR) (some walkedNSteps HighNSteps) (some spentNCalories HighCalorieCountMan) (some hasRunningDistance HighRunningDistance)(some hasRunningR HighRunningR))) #why doesnt work veryhighhr?

# Forgetful/stressed: returning back to places to pick up forgotten objects 
(define-concept ForgetfulStressed (g-and DaySegment (some hasDuration PassByDuration) (some hasAvgHR HighHR)(some hasMaxHR HighHR) (some hasRunningDistance HighRunningDistance) (some hasRunningR HighRunningR)))


(sat?) # is the KB satisfiable?


# INSTANCES: 
# Facts  # Input data: start, end, steps, calories, maxHR, walking, cycling, running, transport, walking cycling, walking transport, cycling transport, walking transport ordered, transport walking ordered, cycling distance, running distance, transport distance, walking distance, lunch walk steps
# the concept (and Person (>= hasAge 18)) denotes the set of people whose age is at least 18.


(define-fuzzy-concept startT crisp(0,1440,0,0))
(define-fuzzy-concept endT crisp(0,1440,519, 519))
(define-fuzzy-concept nSteps crisp(0,1440,594,594))
(define-fuzzy-concept nStepsAtLunch crisp(0,1440,0,0)) 
(define-fuzzy-concept nCalories crisp(0,1440,0,0))
(define-fuzzy-concept maxHR crisp(0,1440,0,0))
#(define-fuzzy-concept avgHR crisp(0,1440,0,0))
(define-fuzzy-concept duration crisp(0,1440,0,0))
#(define-fuzzy-concept lunchDuration crisp(0,1440,0,0))
(define-fuzzy-concept walkingR crisp(0,1440,0.02,0.02))
(define-fuzzy-concept walkingDistance crisp(0,1440,402,402))
(define-fuzzy-concept runningR crisp(0,1440,0,0))
(define-fuzzy-concept runningDistance crisp(0,1440,0,0))
(define-fuzzy-concept transportR crisp(0,1440,0,0))
(define-fuzzy-concept transportDistance crisp(0,1440,0,0))
(define-fuzzy-concept cyclingR crisp(0,1440,0,0))
(define-fuzzy-concept cyclingDistance crisp(0,1440,0,0))

(max-sat? (and EarlyBird day1segment1))
(max-sat? (and NightOwl day1segment1))
(max-sat? (and Shopping day1segment1)) 
(max-sat? (and Kindergarden day1segment1)) 
(max-sat? (and Gym day1segment1)) 
(max-sat? (and POIFrequentVisitor day1segment1)) 
(max-sat? (and Shopaholic day1segment1))  
(max-sat? (and ShoppingListPlanner day1segment1)) 
(max-sat? (and BarLover day1segment1)) 
(max-sat? (and DutchLuncher day1segment1)) 
(max-sat? (and MediterraneanLuncher day1segment1))
(max-sat? (and DutchWorker day1segment1))
(max-sat? (and MediterraneanWorker day1segment1))
(max-sat? (and CalorieOptimizer day1segment1))

(define-concept day1segment1 (g-and NightAndMorning (some hasStartT startT) (some hasEndT endT) (some walkedNSteps nSteps) (some walkedNStepsAtLunch nStepsAtLunch) (some spentNCalories nCalories) (some hasDuration endT) (some hasWalkingR walkingR) (some hasWalkingDistance walkingDistance))) # (some hasRunningDistance runningDistance))

#(show-concrete-fillers hasStartT hasEndT hasWalkingR hasRunningR hasTransportR)
